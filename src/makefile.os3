#/***************************************************************************
#
# codesets.library - Amiga shared library for handling different codesets
# Copyright (C) 2001-2005 by Alfonso [alfie] Ranieri <alforan@tin.it>.
# Copyright (C) 2005      by codesets.library Open Source Team
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# codesets.library project: http://sourceforge.net/projects/codesetslib/
#
# $Id$
#
#***************************************************************************/

# Programs
CC        = m68k-amigaos-gcc
STRIP     = m68k-amigaos-strip
OBJDUMP   = m68k-amigaos-objdump
RM        = rm -f
RMDIR     = rm -rf
MKDIR     = mkdir
CHMOD     = chmod
FLEX      = flex
FC        = flexcat

# Directories
PREFIX    = .
OBJDIR    = .obj_os3
BINDIR    = bin_os3

# Compiler/Linker flags
CPU	     = -m68020-60 
CPUFLAGS = -msoft-float
CDEFS    = -D__CST_VERDATE=\"`date +%d.%m.%Y`\" \
           -D__CST_VERDAYS="`expr \`date +%s\` / 86400 - 2922`"
WARN     = -W -Wall
OPTFLAGS = -O3 -fomit-frame-pointer -funroll-loops
DEBUG    = -DDEBUG #-g3 -O0
REDEFINE =
CFLAGS   = -noixemul -I. -I../include $(CPU) $(CPUFLAGS) $(WARN) $(OPTFLAGS) \
           $(DEBUG) $(REDEFINE) -c
LDFLAGS  = $(CPU) -noixemul -nostartfiles
LDLIBS   = -ldebug

# CPU and DEBUG can be defined outside, defaults to above
# using e.g. "make DEBUG= CPU=-mcpu=603e" produces optimized non-debug PPC-603e version
#
# OPTFLAGS are disabled by DEBUG normally!
#
# ignored warnings are:
# none - because we want to compile with -Wall all the time

TARGET = $(BINDIR)/codesets.library

OBJS = $(OBJDIR)/libinit.o    \
       $(OBJDIR)/init.o       \
       $(OBJDIR)/utils.o      \
       $(OBJDIR)/base64.o     \
       $(OBJDIR)/convertUTF.o \
       $(OBJDIR)/codesets.o

#
all: $(BINDIR) $(OBJDIR) $(TARGET)

# make the object directories
$(OBJDIR):
	@printf '\033[33mGenerating $@ directory\033[0m\n'
	@$(MKDIR) $(OBJDIR)

# make the binary directories
$(BINDIR):
	@printf '\033[33mGenerating $@ directory\033[0m\n'
	@$(MKDIR) $(BINDIR)

#

$(OBJDIR)/%.o: %.c
	@printf '\033[32mCompiling $<\033[0m\n'
	@$(CC) $(CFLAGS) $< -o $@

#

$(TARGET): $(M68KSTUBS) $(OBJS)
	@printf '\033[32mLinking \033[1m$@\033[0m\n'
	@$(CC) $(LDFLAGS) -o $@.debug $(OBJS) $(LDLIBS)
	@$(STRIP) -o $@ $@.debug

#

.PHONY: clean
clean:
	-$(RM) $(TARGET) $(TARGET).debug $(OBJS) $(M68KSTUBS)

.PHONY: distclean
distclean: clean
	-$(RMDIR) $(OBJDIR)
	-$(RMDIR) $(BINDIR)

#

$(OBJDIR)/libinit.o:      libinit.c lib.h codesets.library_rev.h base.h macros.h lib_protos.h
$(OBJDIR)/init.o:         init.c lib.h base.h macros.h lib_protos.h
$(OBJDIR)/utils.o:        utils.c lib.h base.h macros.h lib_protos.h
$(OBJDIR)/base64.o:       base64.c lib.h base.h macros.h lib_protos.h
$(OBJDIR)/convertUTF.o:   convertUTF.c lib.h convertUTF.h base.h macros.h lib_protos.h
$(OBJDIR)/codesets.o:     codesets.c lib.h codesets_table.h convertUTF.h base.h macros.h lib_protos.h
