----------------------------------------------------------
codesets.library - Library for handling different codesets
----------------------------------------------------------

$Id$

2006-03-14  Jens Langner <Jens.Langner@light-speed.de>

    * misc: switched from CVS to the new SVN (subversion) services of
      sf.net. Should should definitly increase our project's flexibility.

2006-02-28  Jens Langner <Jens.Langner@light-speed.de>

    * utils.c: removed the unnecessary snprintf()/sprintf() stuff as it
      is not required anymore.
    * codesets.c: fixed some minor compiler warnings and added some more
      debug output.
    * include/SDI_lib.h: updated to latest SDI_lib.h, which fixes some
      compiler issues with GCC3+ under OS3.

#### 6.0 RELEASE #########################################################

2006-02-25  Jens Langner <Jens.Langner@light-speed.de>

    * misc: final 6.0 release preparations.
    * codesets.doc: updated the autodocs according to our latest changes
      sind the open-source release of the library. Added some common
      examples and also restructed it.
    * codesets.c: changed all "struct MinList *" related functions to use
      the newly defined "struct codesetList *" instead. This new type
      instead of the public MinList type keeps those functions more
      flexible in future.
    * codesets.c: changed CodesetsListDelete() to be a tagitem receiving
      function. This should make it much more usable in future.
    * codesets.c: modified all CodesetsListX() functions to return a
      boolean value to signal if an operating succeeded or not.
    * libraries/codesets.h: changed all tag items to carry the shortcut
      CSA instead of the long CODESETSA_XXXX string. This should make the
      use of codesets.library more intuitive.

2006-02-21  Jens Langner <Jens.Langner@light-speed.de>

    * codesets.c: changed the scandir function to use ExAll() instead
      of using the FileInfoBlock structures. This should be slightly
      faster and more consistent.
    * codesets.c: replaced the previously added internal private
      codeset list management functions with a more transparent
      approach using separate functions (CodesetsListCreateA(),
      CodesetsListDelete(), etc.). Now a user may generate an
      unlimited number of own private codesets lists allowing him
      to load additional codesets on runtime from either a directory,
      file or already existing codesets.

2006-02-15  Jens Langner <Jens.Langner@light-speed.de>

    * codesets.c: added a new internal "findPrivateCodesetList()"
      function and made CodesetsFindA()/CodesetsFindBestA() aware of
      the newly added CODESETSA_RefTask attribute which will allow a
      user to directly specify the referencing task for searching for
      a private codesets list. This in fact may only be used in
      multithreaded applications where functions like CodesetsFindA()
      are used from a different task/thread than the OpenLibrary()
      of codesets.library was done.

2006-02-14  Jens Langner <Jens.Langner@light-speed.de>

    * misc: implemented a private codeset management facility. Now
      codeset.library will automatically scan an eventually existing
      PROGDIR:Charsets and if present will load those codesets in a
      per-task private list of codesets which will be added to the
      global list of supported codesets as well.
    * misc: implemented new CodesetsConvertStrA() library function which
      will allow to specify a source and destination codeset as well as
      a source string. The source string is then automatically converted
      to the supplied destination string. This in turn should give a
      plenty transparent method to convert strings from one codeset
      to another.
    * added the UTF-8 codeset to the internal list of supported codesets.
      However, as the UTF-8 codeset is a very central codeset it is
      treated special in such case that if UTF8Create() is used with a
      string that is already encoded in UTF8, false will be returned.

2005-12-16  Jens Langner <Jens.Langner@light-speed.de>

    * init.c: changed the system default charset identification routines
      to use the GetDiskFontCtrl() function on AmigaOS4 to find out
      the currently active system charset. In addition, if this
      identification fails it will try to find out the charset by falling
      back to checking ENV:CHARSET, then using ENV:LANGUAGE to parse ther
      internal language<>codeset list and if this also fails it will
      directly use locale.library to find out the language to check
      our own internal fallback tables for default charset<>language
      mapping.
    * codesets.c: if running on AmigaOS4, codesets.library will now
      automatically query diskfont.library for the existing codesets
      and also load all existing mapping tables accordingly. It will
      also check if all internally known codesets are already present
      and if one of it was not loaded through diskfont.library, the
      internal mapping tables will be used as well.
    * debug.c,h: added a whole debugging output system adapted and
      relicensed from the YAM project. Now an environment variable
      can be usd (ENV:codesets.library.debug) to place debugging
      tags and allow to differniate which output should be displayed
      during runtime and which one not. This should hopefully make
      the debugging of the library much more easier.

2005-12-14  Jens Langner <Jens.Langner@light-speed.de>

    * codesets.c, codesets_table.h: updated internal codesets
      implementations in accordance to the latest implementation in
      SimpleMail. Now codesets.library also supports the Amiga-1251
      and ISO-8859-16.
    * misc: did some general housekeeping code cleanups.

2005-12-11  Jens Langner <Jens.Langner@light-speed.de>

    * developer/examples: ported the demo1.c application to all our
      supported platforms
    * include/SDI_*.h: update SDI headers to latest versions.

2005-12-08  Jens Langner <Jens.Langner@light-speed.de>

    * bumped version to v6 as the GCC/OS4 porting may introduce some
      oddities which we might eliminate during the v6 release cycle.
      Please note that this first OS3/GCC and OS4 porting effort may
      still contain some oddities here and there as large portions are
      still untested. However, we may have some time to fix step by step
      until we can prepare a v6.0 release.
    * got rid of all common compiler warnings which should make bug
      hunting much more easier.
    * restructed sources to use othe latest SDI-headers for easily
      maintaining the sources for all three platforms without
      introducing heaps to #ifdef's.
    * dropped all "register" attribute usages as modern compilers like
      GCC normally know where to put variables on registers and where not
      so these attributes are anyway not necessary.
    * dropped smakefile and all 68k ASM parts as we are moving towards
      building with GCC for all targets.
    * restructed the build environment of codesets.library to use
      GCC for all three major platforms (OS3/OS4/MOS). Also dropped
      the SAS/C build process. Sorry, but SAS/C is really way too old
      and too buggy to still be considered a sensible compiler and
      maintaining codesets.library for the very same compiler should
      eliminate some problems in future, too.
    * partly applied OS4 porting patch supplied by Alexandre Balaban.

2005-11-23  Alfonso Ranieri <alforan@tin.it>

    * initial checkin of LGPLed sources
